# -*- coding: utf-8 -*-
"""DL_Project_04_Face_Mask_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qmQJvJeKCzMSP5YiMUHLAgLG47yzviw-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d omkargurav/face-mask-dataset

import zipfile
zip_ref = zipfile.ZipFile('/content/face-mask-dataset.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

import os
import matplotlib.image as mping
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

with_mask = os.listdir('/content/data/with_mask')
print(with_mask[1:6])
print(with_mask[-5:])

without_mask = os.listdir('/content/data/without_mask')
print(without_mask[1:6])
print(without_mask[-5:])

print("Number of with mask image",len(with_mask))
print("Number of without mask image",len(without_mask))

# Create labels
# with mask  1
# without mask 0
with_mask_labels = [1]*3725
without_mask_labels = [0]*3828

['Ai']*4

print(with_mask_labels[:5])
print(without_mask_labels[:5])

labels = with_mask_labels + without_mask_labels
print(len(labels))
print(labels[:5])
print(labels[-5:])

# Displaying the image
img = mping.imread('/content/data/with_mask/with_mask_1.jpg')
plt.imshow(img)

# displaying image without mask
img = mping.imread('/content/data/without_mask/without_mask_2925.jpg')
plt.imshow(img)
plt.show()

# Image Processing

# Convert the images into numpy array
# resize
with_mask_path = '/content/data/with_mask/'

data  = []

for image_filename in with_mask:
  image = Image.open(with_mask_path + image_filename)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

without_mask_path = '/content/data/without_mask/'

for image_filename in without_mask:
  image = Image.open(without_mask_path + image_filename)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

type(data)

len(data)

data[0]

data[0].shape

type(data[0])

# Converting the image list and label list to numpy array
X = np.array(data)
y = np.array(labels)

type(X),type(y)

X.shape, y.shape

# train test split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=2)

X_train.shape,y_train.shape,X_test.shape,y_test.shape

X_train_scale = X_train/255.
X_test_scale = X_test/255.

X_train_scale[0]

X_train[0]

# Building a Convolutional Neural Network
import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout,Input

model = Sequential()
model.add(Input(shape=(128,128,3)))

model.add(Conv2D(32,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Dropout(0.1))

model.add(Conv2D(64,kernel_size=(3,3),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Dropout(0.1))

model.add(Flatten())

model.add(Dense(64,activation='relu'))
model.add(Dropout(0.1))

model.add(Dense(32,activation='relu'))
model.add(Dropout(0.1))

model.add(Dense(2,activation='sigmoid'))



model.summary()

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

# training the neural network
history = model.fit(X_train_scale, y_train, validation_split=0.1, epochs=5)

loss, accuracy = model.evaluate(X_test_scale, y_test)
print('Test Accuracy =', accuracy)

plt.plot(history.history['accuracy'],label='train accuracy')
plt.plot(history.history['val_accuracy'],label='validation accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'],label='train loss')
plt.plot(history.history['val_loss'],label='validation loss')
plt.legend()
plt.show()

"""## **Predictive System**"""

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

plt.imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

plt.imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')